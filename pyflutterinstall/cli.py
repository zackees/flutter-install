"""
Runs the installer

When this is done, the directory structure will look like this
sdk/Android:
    build-tools
    cmdline-tools
    emulator       # Generated by the Android SDK Manager
    flutter
    java
    licenses       # Generated by the Android SDK Manager
    patcher        # Generated by the Android SDK Manager
    platforms      # Generated by the Android SDK Manager
    platform-tools # Generated by the Android SDK Manager
    system-images  # Generated by the Android SDK Manager
    tools          # Generated by the Android SDK Manager
"""

# pylint: disable=missing-function-docstring,consider-using-with,disable=invalid-name,subprocess-run-check

import argparse
import os
import sys
import shutil
import subprocess
from typing import Callable
from colorama import just_fix_windows_console  # type: ignore

from pyflutterinstall.resources import INSTALL_DIR

from pyflutterinstall.util import (
    make_title,
    make_dirs,
    set_global_skip_confirmation,
)

from pyflutterinstall.install import (
    install_java_sdk,
    install_android_sdk,
    install_flutter,
    install_chrome,
)


def ask_if_interactive(
    is_interactive: bool, callback_name: str, callback: Callable
) -> None:
    if is_interactive:
        if input(f"install {callback_name} (y/n)? ") == "y":
            callback()
    else:
        callback()


def postinstall_run_flutter_doctor() -> None:
    cmd = "flutter doctor -v"
    make_title(f"Executing '{cmd}'")
    if not shutil.which("flutter"):
        print("Flutter not found in path")
        return
    subprocess.call(cmd, shell=True, text=True, universal_newlines=True)


def main():
    just_fix_windows_console()  # Fixes color breakages
    parser = argparse.ArgumentParser(description="Installs Flutter Dependencies")
    parser.add_argument(
        "--skip-confirmation",
        action="store_true",
        help="Skip confirmation",
        default=False,
    )
    parser.add_argument("--skip-java", action="store_true", help="Skip Java SDK")
    parser.add_argument("--skip-android", action="store_true", help="Skip Android SDK")
    parser.add_argument("--skip-flutter", action="store_true", help="Skip Flutter SDK")
    parser.add_argument("--skip-chrome", action="store_true", help="Skip Chrome")
    args = parser.parse_args()
    assert (
        shutil.which("git") is not None
    ), "Git is not installed, please install, add it to the path then continue."
    any_skipped = any(
        [args.skip_java, args.skip_android, args.skip_flutter, args.skip_chrome]
    )
    print(
        f"This will install Flutter and its dependencies into {os.path.basename(INSTALL_DIR)}"
    )
    skip_confirmation = (
        args.skip_confirmation or input("auto-accept all? (y/n): ").lower() == "y"
    )
    interactive = not skip_confirmation
    set_global_skip_confirmation(skip_confirmation)
    print("\nInstalling Flutter SDK and dependencies\n")
    make_dirs()
    if not args.skip_java:
        ask_if_interactive(interactive, "java_sdk", install_java_sdk)
    if not args.skip_android:
        ask_if_interactive(interactive, "android_sdk", install_android_sdk)
    if not args.skip_flutter:
        ask_if_interactive(interactive, "flutter", install_flutter)
    if not args.skip_chrome:
        ask_if_interactive(interactive, "chrome", install_chrome)
    if not args.skip_flutter:
        postinstall_run_flutter_doctor()
    if not any_skipped:
        print("\nDone installing Flutter SDK and dependencies\n")
    if sys.platform == "win32":
        print("Please restart your terminal to apply the changes")
    return 0


if __name__ == "__main__":
    sys.exit(main())
